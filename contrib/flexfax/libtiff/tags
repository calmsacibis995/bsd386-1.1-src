BITCASE	tif_fax3.c	/^#define	BITCASE(b)			\\$/
CALCRATIO	tif_lzw.c	/^#define	CALCRATIO(sp, rat) {					\\$/
CASE4	tif_getimage.c	/^#define	CASE4(x,op)	switch (x) { case 3: op; case /
CASE8	tif_getimage.c	/^#define	CASE8(x,op)				\\$/
CLAMP	tif_getimage.c	/^#define	CLAMP(f,min,max) \\$/
CMAP	tif_getimage.c	/^#define	CMAP(x)	\\$/
CVT	tif_getimage.c	/^#define	CVT(x)		(((x) * 255) \/ ((1L<<16)-1))$/
CleanupField	tif_dir.c	/^#define	CleanupField(member) {		\\$/
Code2V	tif_getimage.c	/^#define	Code2V(c, RB, RW, CR)	((((c)-RB)*(float)CR/
DECLARE1	tif_aux.c	/^DECLARE1(TIFFDefaultTransferFunction, TIFFDirector/
DECLARE2	tif_compress.c	/^DECLARE2(TIFFNoEncode, TIFF*, tif, char*, method)$/
DECLARE2V	tif_aux.c	/^DECLARE2V(TIFFGetFieldDefaulted, TIFF*, tif, u_int/
DECLARE3	tif_aux.c	/^DECLARE3(TIFFVGetFieldDefaulted, TIFF*, tif, u_int/
DECLARE4	tif_compress.c	/^DECLARE4(TIFFNoRowEncode, TIFF*, tif, u_char*, pp,/
DECLARE5	tif_dirread.c	/^DECLARE5(cvtRational, TIFF*, tif, TIFFDirEntry*, d/
DECLARE6	tif_dirwrite.c	/^DECLARE6(TIFFWriteShortArray, TIFF*, tif,$/
DECLAREContigPutFunc	tif_getimage.c	/^#define	DECLAREContigPutFunc(name) \\$/
DECLARESepPutFunc	tif_getimage.c	/^#define	DECLARESepPutFunc(name) \\$/
GREY	tif_getimage.c	/^#define	GREY(x)	c = Map[x]; *p++ = PACK(c,c,c);$/
GetNextCode	tif_lzw.c	/^#define	GetNextCode(sp, bp, code) {				\\$/
GetNextCodeCompat	tif_lzw.c	/^#define	GetNextCodeCompat(sp, bp, code) {			\\$/
MAXCODE	tif_lzw.c	/^#define MAXCODE(n)	((1<<(n))-1)$/
NITEMS	tif_dirread.c	/^#define	NITEMS(x)	(sizeof (x) \/ sizeof (x[0]))$/
NextCode	tif_lzw.c	/^#define	NextCode(tif, sp, bp, code, get) {				\\$/
PACK	tif_getimage.c	/^#define	PACK(r,g,b)	((u_long)(r)|((u_long)(g)<<8)|/
PIXEL	tif_fax3.c	/^#define	PIXEL(buf,ix)	((((buf)[(ix)>>3]) >> (7-((i/
PutNextCode	tif_lzw.c	/^#define	PutNextCode(op, c) {					\\$/
REPEAT2	tif_getimage.c	/^#define	REPEAT2(op)	op; op$/
REPEAT4	tif_getimage.c	/^#define	REPEAT4(op)	REPEAT2(op); REPEAT2(op)$/
REPEAT8	tif_getimage.c	/^#define	REPEAT8(op)	REPEAT4(op); REPEAT4(op)$/
SETPIXEL	tif_next.c	/^#define SETPIXEL(op, v) {			\\$/
SKEW	tif_getimage.c	/^#define	SKEW(r,g,b,skew)	{ r += skew; g += skew; b/
TIFFClientOpen	tif_open.c	/^TIFFClientOpen(name, mode,$/
TIFFCvtIEEEFloatToNative	tif_dirread.c	/^#define	TIFFCvtIEEEFloatToNative(tif, n, fp)$/
TIFFCvtNativeToIEEEFloat	tif_dirwrite.c	/^#define	TIFFCvtNativeToIEEEFloat(tif, n, fp)$/
TIFFGetVersion	tif_version.c	/^TIFFGetVersion()$/
TIFFModeCCITTFax3	tif_fax3.c	/^TIFFModeCCITTFax3(tif, isClassF)$/
UNROLL2	tif_getimage.c	/^#define	UNROLL2(w, op1, op2) {		\\$/
UNROLL4	tif_getimage.c	/^#define	UNROLL4(w, op1, op2) {		\\$/
UNROLL8	tif_getimage.c	/^#define	UNROLL8(w, op1, op2) {		\\$/
WRITE	tif_dirwrite.c	/^#define	WRITE(x,y)	x(tif, fip->field_type, fip->fi/
WriteRationalPair	tif_dirwrite.c	/^#define	WriteRationalPair(type, tag1, v1, tag2, v2/
XREPEAT4	tif_lzw.c	/^#define XREPEAT4(n, op)		\\$/
fetchByte	tif_fax3.c	/^#define	fetchByte(tif, sp) \\$/
initYCbCrConversion	tif_getimage.c	/^initYCbCrConversion()$/
is2DEncoding	tif_fax3.c	/^#define	is2DEncoding(tif) \\$/
isBitSet	tif_fax3.c	/^#define	isBitSet(sp)	((sp)->b.data & bitMask[(sp)-/
isUnspecified	tif_write.c	/^#define	isUnspecified(td, v) \\$/
putRGBContigYCbCrClump	tif_getimage.c	/^putRGBContigYCbCrClump(cp, pp, cw, ch, w, n, froms/
