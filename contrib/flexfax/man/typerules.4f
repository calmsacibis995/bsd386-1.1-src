.\"	$Header: /bsdi/MASTER/BSDI_OS/contrib/flexfax/man/typerules.4f,v 1.1.1.1 1994/01/14 23:10:13 torek Exp $
.\"
.\" FlexFAX Facsimile Software
.\"
.\" Copyright (c) 1993 Sam Leffler
.\" Copyright (c) 1993 Silicon Graphics, Inc.
.\" 
.\" Permission to use, copy, modify, distribute, and sell this software and 
.\" its documentation for any purpose is hereby granted without fee, provided
.\" that (i) the above copyright notices and this permission notice appear in
.\" all copies of the software and related documentation, and (ii) the names of
.\" Sam Leffler and Silicon Graphics may not be used in any advertising or
.\" publicity relating to the software without the specific, prior written
.\" permission of Sam Leffler and Silicon Graphics.
.\" 
.\" THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
.\" EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
.\" WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
.\" 
.\" IN NO EVENT SHALL SAM LEFFLER OR SILICON GRAPHICS BE LIABLE FOR
.\" ANY SPECIAL, INCIDENTAL, INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND,
.\" OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
.\" WHETHER OR NOT ADVISED OF THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF 
.\" LIABILITY, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 
.\" OF THIS SOFTWARE.
.\"
.TH TYPERULES 4F "May 12, 1993"
.SH NAME
typerules \-
.I FlexFAX
file type identification and conversion rules
.SH DESCRIPTION
Only two types of files are accepted by the fax server for transmission:
PostScript\(tm files and 
.SM TIFF
Class F (bilevel Group 3-encoded) files.
All other types of files must be converted to one
of these two formats.
The facsimile submission program
applies a set of rules against the contents
of each input file to identify the file's
type and to figure out how to convert the file to a format that is
suitable for transmission.
These rules are stored in the file
.BR ${LIBDATA}/typerules ,
an
.SM ASCII
file that is patterned after the
.I /etc/magic
file used by the System V
.IR file (1)
program.
.PP
Type rules work by matching data patterns in a file; typically
patterns that appear in the first few bytes of the file (i.e.
magic numbers).
There are two types of rules,
.I "primary rules"
and
.IR "secondary rules" .
Secondary rules specifying additional rules to apply
.I after
a primary rule has been matched.
When secondary rules are used, rule scanning
continues up to the next primary type rule in the file.
.PP
Each rule consists of a set of whitespace-separated fields:
.nf
.sp .5
.ti +.5i
.ta \w'\fIoffset\fP    'u +\w'\fIdatatype\fP    'u +\w'\fImatch\fP    'u +\w'\fIcommand\fP  'u
\fIoffset\fP	\fIdatatype\fP	\fImatch\fP	\fIresult\fP	\fIcommand\fP
.sp .5
.fi
If an line is terminated wth a backslash character, the entry
is continued on the next line with any leading whitespace characters
compressed to a single space.
Comments are marked with the ``#'' character; everything from to the
end of the line is discarded.
Secondary rules have a ``>'' character in the first column of the line;
primary rules do not.
.PP
The fields in each rule entry are:
.TP 10
.B offset
The byte offset in the file at which data should be extracted
and compared to a matching string or value.
.TP 10
.B datatype
The type of data value to extract at the specified offset for
comparison purposes; one of:
.I byte
(8 bit unsigned number),
.I short
(16 bit unsigned number),
.I long
(32 bit unsigned number),
.I string
(an array of bytes), or
.I ascii
(an array of \s-1ASCII\s+1-only bytes).
.TP 10
.B match
The value and operation to use in matching; the value used is
based on the datatype field.
If value is ``\fIx\fP'', then
it is interpreted to mean 
.I "match anything";
otherwise the
following operators are supported (where
.I data
is the value extracted from the file and
.I value
is specified in the match field):
.nf
.sp .5
.ta \w'>=    'u +\w'(data & value) == value    'u +\w'>=    'u
.in +.5i
=	data == value	!=	data != value
>	data > value	<	data < value
<=	data <= value	>=	data >= value
&	(data & value) == value	!	(data & value) != value
^	(data ^ value) != 0
.in -.5i
.sp .5
.fi
If no operation is specified then ``='' is used.
.TP 10
.B result
One of ``\fIps\fP'', ``\fItiff\fP'', or ``\fIerror\fP'' (case insensitive).
The first two results specify whether the
rule generates a PostScript file or a Class F
.SM TIFF
file (Group 3-encoded bilevel data), respectively.
The ``\fIerror\fP'' result indicates that a
file is unsuitable for transmission and, if supplied for transmission,
should cause the job to be aborted with the
.I command
field used in an error message.
.TP 10
.B command
A command description that is expanded and
passed to the shell to convert the input file
to the result format (suitable for sending as facsimile).
Before the string is passed to the shell, it is scanned
and the following ``%'' escape codes are substituted for:
.nf
.sp .5
.in +.5i
.ta \w'%<x>    'u
%i	input file name
%o	output file name
%r	output horizontal resolution in pixels/mm
%R	output horizontal resolution in pixels/inch
%v	output vertical resolution in lines/mm
%V	output vertical resolution in lines/inch
%f	data format, ``1'' for 1-d encoding or ``2'' for 2-d encoding
%w	page width in mm
%W	page width in pixels
%l	page length in mm
%L	page length in pixels
%s	page size by name
%F	the directry where \fI\s-1FlexFAX\s+1\fP filters reside
%<x>	the <x> character (e.g. ``%%'' results in ``%''
.in -.5i
.sp .5
.fi
See below for example uses of these codes.
.SH EXAMPLES
The following rules are used to match the formats
that are handled directly by the server:
.nf
.sp .5
.ta \w'offset    'u +\w'datatype    'u +\w'#Inventor V    'u +\w'result    'u +\w'command        'u
#offset	datatype	match	result	command
0	string	%!	ps		# PostScript
0	short	0x4d4d	tiff		# big-endian \s-1TIFF\s+1
0	short	0x4949	tiff		# little-endian \s-1TIFF\s+1
.fi
.PP
These rules are used to process the
.SM ASCII
version of
.SM IRIS
Inventor database files while blocking the transmission
of the binary format variant:
.nf
.sp .5
.ta \w'offset    'u +\w'datatype    'u +\w'#Inventor V    'u +\w'result    'u +\w'command        'u
#offset	datatype	match	result	command
0	string	#Inventor V	error	IRIS Inventor file 
>15	string	binary	error	binary IRIS Inventor file
>15	string	ascii	ps	%F/lptops \-fCourier-Bold \-p11bp\e
				    \-U \-q >%o <%i
.fi
.PP
This rule is typically the last entry in the file and is
used to convert all unmatched \s-1ASCII\s+1 data files to PostScript:
.nf
.sp .5
.ta \w'offset    'u +\w'datatype    'u +\w'#Inventor V    'u +\w'result    'u +\w'command        'u
#offset	datatype	match	result	command
0	ascii	x	ps	%F/lptops \-fCourier-Bold \-p11bp \-U \-q >%o <%i
.fi
.SH NOTES
It is much better to convert data that is to be
transmitted to PostScript because this data format
permits the facsimile server to do the final imaging according to
the optimal transfer parameters (resolution, binary encoding, etc.).
.PP
It might be better to allow secondary rules to augment a primary
rule rather than just replace them.
This would allow, for example, command line options to be selected
based on file type.
.SH "SEE ALSO"
.IR sendfax (1),
.IR faxd (1M)
