.\"	BSDI $Id: fcntl.2,v 1.2 1993/03/23 05:02:25 polk Exp $
.\"
.\" Copyright (c) 1983 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)fcntl.2	6.7 (Berkeley) 3/10/91
.\"
.Dd March 12, 1993
.Dt FCNTL 2
.Os
.Sh NAME
.Nm fcntl
.Nd file control
.Sh SYNOPSIS
.Fd #include <sys/fcntl.h>
.Ft int
.Fn fcntl "int fd" "int cmd" "int arg"
.Sh DESCRIPTION
.Fn Fcntl
provides for control over descriptors.
The argument
.Fa fd
is a descriptor to be operated on by
.Fa cmd
as follows:
.Bl -tag -width F_GETOWNX
.It Dv F_DUPFD
Return a new descriptor as follows:
.Pp
.Bl -bullet -compact -offset 4n
.It
Lowest numbered available descriptor greater than or equal to
.Fa arg .
.It
Same object references as the original descriptor.
.It
New descriptor shares the same file offset if the object
was a file.
.It
Same access mode (read, write or read/write).
.It
Same file status flags (i.e., both file descriptors
share the same file status flags).
.It
The close-on-exec flag associated with the new file descriptor
is set to remain open across
.Xr execv 2
system calls.
.El
.It Dv F_GETFD
Get the close-on-exec flag associated with the file descriptor
.Fa fd .
If the low-order bit of the returned value is 0,
the file will remain open across
.Fn exec ,
otherwise the file will be closed upon execution of
.Fn exec
.Fa ( arg
is ignored).
.It Dv F_SETFD
Set the close-on-exec flag associated with
.Fa fd
to the low order bit of
.Fa arg
(0 or 1 as above).
.It Dv F_GETFL
Get descriptor status flags, as described below
.Fa ( arg
is ignored).
.It Dv F_SETFL
Set descriptor status flags to
.Fa arg .
.It Dv F_GETOWN
Get the process ID or process group
currently receiving
.Dv SIGIO
and
.Dv SIGURG
signals; process groups are returned
as negative values
.Fa ( arg
is ignored).
.It Dv F_SETOWN
Set the process or process group
to receive
.Dv SIGIO
and
.Dv SIGURG
signals;
process groups are specified by supplying
.Fa arg
as negative, otherwise 
.Fa arg
is interpreted as a process ID.
.It Dv F_GETLK
Get advisory file record lock information about the file
to which
.Fa fd
refers.
The
.Fa arg
parameter is used as a pointer to an
.Fa flock
structure (see below for the structure and operation).
.It Dv F_SETLK
Set or clear an advisory file record lock on the file
to which
.Fa fd
refers.
The
.Fa arg
parameter is used as a pointer to an
.Fa flock
structure (see below for the structure and operation).
If a lock cannot be acquired immediately, the function
returns immediately.
.It Dv F_SETLKW
Set or clear an advisory file record lock on the file
to which
.Fa fd
refers.
The
.Fa arg
parameter is used as a pointer to an
.Fa flock
structure (see below for the structure and operation).
The function waits if necessary to acquire a lock.
.El
.Pp
The flags for the
.Dv F_GETFL
and
.Dv F_SETFL
flags are as follows:
.Bl -tag -width F_GETOWNX
.It Dv O_NONBLOCK
Non-blocking I/O; if no data is available to a
.Xr read
call, or if a
.Xr write
operation would block,
the read or write call returns -1 with the error
.Er EAGAIN
(also known as
.Er EWOULDBLOCK ) .
.DV O_NONBLOCK
was previously known as
.Dv O_NDELAY
or
.Dv FNDELAY .
.It Dv O_APPEND
Force each write to append at the end of file;
corresponds to the
.Dv O_APPEND
flag of
.Xr open 2 .
.It Dv O_ASYNC
Enable the
.Dv SIGIO
signal to be sent to the process group
when I/O is possible, e.g.,
upon availability of data to be read.
.El
.Pp
The advisory record locking functions operate on regions of a file
described by a range of offsets within the file.
These advisory locks have no effect on I/O operations,
but only on the lock operations themselves; thus, they are
.Dq advisory ,
and are effective only among processes that use this facility.
An advisory file lock covers a contiguous range of offsets
in the file, and is set as either a read lock or a write lock.
Any number of read locks may include a region of a file as long
as there is no write lock within the region; a write lock must be
the only lock for the affected range.
Locks may start or extend past the end of the file,
but may not begin before the start of the file.
Advisory record locks are associated with a process, not with the descriptor;
if a descriptor is shared across processes (for example, after a fork),
only one process owns the lock.
If that process closes any descriptor open on the same file,
all locks owned by the process are released.
.Pp
The advisory file locks described in
.Xr flock 2
operate in a fashion similar to advisory record locks that span all possible
offsets of the file,
and thus either type of lock may block the other type.
However, unlike record locks, file locks are associated with the descriptor
and not with the process.
.Pp
Advisory record locks are described and manipulated using an
.Nm flock
structure as defined in
.Aq Pa sys/fcntl.h :
.Bd -literal
struct flock {
    short   l_type;     /* lock type: read/write, etc. */
    short   l_whence;   /* type of l_start */
    off_t   l_start;    /* starting offset */
    off_t   l_len;      /* len = 0 means until end of file */
    pid_t   l_pid;      /* lock owner */
};
.Ed
.Pp
The value of
.Fa l_type
must be one of the following before each call:
.Bl -tag -width F_GETOWNX
.It Dv F_RDLCK
The lock to be set or tested is to be a read (shared) lock.
.It Dv F_WRLCK
The lock to be set or tested is to be a write (exclusive) lock.
.It Dv F_UNLCK
The lock is to be cleared.
.El
.Pp
The starting offset of a region is described by
.Fa l_whence
and
.Fa l_start
in the style of
.Xr lseek 2 ;
.Fa l_whence
must be one of
.Dv SEEK_SET ,
.Dv SEEK_CUR
or
.Dv SEEK_END ,
meaning that the offset is relative to the beginning of the file,
the current offset of the descriptor,
or the end of the file, respectively.
The field
.Fa l_len
is the length of the region, in bytes; a length
of 0 denotes a region extending to the largest possible size of the file.
The contents of the structure before a call
define a region of the file and a lock type.
.Pp
For the
.Dv F_GETLK
operation, if a lock of the specified type is blocked by one or more locks,
the type and range of one of those locks is returned in the
.Fa flock
structure, and the 
.Fa l_pid
field is set to the process ID of the lock's owner.
If the lock could have been granted, the
.Fa l_type
field is set to
.Dv F_UNLCK .
The
.Fa l_whence field
is always set to
.Dv SEEK_SET
after a successful call with a
.Fa cmd
of
.Dv F_GETLK .
.Pp
The
.Dv F_SETLK
and
.Dv F_SETLKW
commands request a lock as described by an
.Fa flock
structure.
If the
.Fa l_type
field is 
.Dv F_UNLCK ,
any locks owned by the caller in the specified region are released.
Otherwise, an attempt is made to acquire the requested lock.
If the caller holds a lock on any part of the specified range before
a call requesting a different lock type, the previous lock is changed
to the new type if the call is successful.
If a lock cannot be acquired without blocking, the operation
fails immediately if the command is
.Dv F_SETLK ,
and may block if the command is
.Dv F_SETLKW .
The system may determine that waiting for a lock could result
in deadlock; for example, if the requested lock is blocked by a lock
owned by a process
that in turn is awaiting another lock held by the caller,
deadlock would result if neither attempt timed out.
If a deadlock situation is detected, the call fails immediately.
.Sh RETURN VALUES
Upon successful completion, the value returned depends on
.Fa cmd
as follows:
.Bl -tag -width F_GETOWNX -offset indent
.It Dv F_DUPFD
A new file descriptor.
.It Dv F_GETFD
Value of flag (only the low-order bit is defined).
.It Dv F_GETFL
Value of flags.
.It Dv F_GETOWN
Value of file descriptor owner.
.It other
Value other than -1.
.El
.Pp
Otherwise, a value of -1 is returned and
.Va errno
is set to indicate the error.
.Sh ERRORS
.Fn Fcntl
will fail if:
.Bl -tag -width Er
.It Bq Er EBADF
.Fa Fildes
is not a valid open file descriptor.
.It Bq Er EMFILE
.Fa Cmd
is
.Dv F_DUPFD
and the maximum allowed number of file descriptors are currently
open.
.It Bq Er EINVAL
.Fa Cmd
is not one of the values listed here.
.It Bq Er EINVAL
.Fa Cmd
is
.Dv F_DUPFD
and
.Fa arg
is negative or greater than the maximum allowable number
(see
.Xr intro 2 ) .
.It Bq Er ESRCH
.Fa Cmd
is
.Dv F_SETOWN
and
the process ID given as argument is not in use.
.It Bq Er EAGAIN
.Fa Cmd
is
.Dv F_SETLK ,
and the requested lock was blocked by an existing lock owned by another
process.
.It Bq Er EBADF
.Fa Cmd
is one of
.Dv F_GETLK ,
.Dv F_SETLK ,
or
.Dv F_SETLKW ,
and
.Fa fildes
refers to a socket rather than to a file.
.It Bq Er EBADF
.Fa Cmd
is either
.Dv F_SETLK
or
.Dv F_SETLKW ,
and either a read lock was requested on a file that is not open for reading,
or a write lock was requested on a file that is not open for writing.
.It Bq Er EDEADLK
.Fa Cmd
is
.Dv F_SETLKW ,
and awaiting the requested lock could result in a deadlock.
.It Bq Er EINVAL
.Fa Cmd
is one of
.Dv F_GETLK ,
.Dv F_SETLK ,
or
.Dv F_SETLKW ,
and the parameters in the
.Fa flock
structure referenced by
.Fa arg
do not have the values described above.
.It Bq Er EFAULT
.Fa Cmd
is one of
.Dv F_GETLK ,
.Dv F_SETLK ,
or
.Dv F_SETLKW ,
and the
.Fa flock
structure referenced by
.Fa arg
could not be read or written.
.It Bq Er EINTR
.Fa Cmd
is
.Dv F_SETLKW ,
the operation blocked awaiting a lock, and the operation was interrupted
by receipt of a signal.
.El
.Sh SEE ALSO
.Xr close 2 ,
.Xr execve 2 ,
.Xr flock 2 ,
.Xr intro 2 ,
.Xr lseek 2 ,
.Xr open 2 ,
.Xr sigaction 2
.Sh BUGS
The asynchronous I/O facilities of
.Dv O_NONBLOCK
and
.Dv FASYNC
are currently available only for tty and socket operations.
.Pp
The advisory record locking facility is currently available
only for local files.
.Sh STANDARDS
The
.Nm
function call is specified by
.St -p1003.1 .
