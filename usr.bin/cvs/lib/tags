AT_WORD_BOUNDARY	regex.c	/^#define AT_WORD_BOUNDARY(d)						\\$/
DEBUG_COMPILED_PATTERN_PRINTER	regex.c	/^#define DEBUG_COMPILED_PATTERN_PRINTER(p, s, e) 		/
DEBUG_DOUBLE_STRING_PRINTER	regex.c	/^#define DEBUG_DOUBLE_STRING_PRINTER(w, s1, sz1, s2/
DEBUG_POP	regex.c	/^#define DEBUG_POP(item_addr) *(item_addr) = POP_FA/
DEBUG_PRINT1	regex.c	/^#define DEBUG_PRINT1(x) if (debug) printf (x)$/
DEBUG_PRINT2	regex.c	/^#define DEBUG_PRINT2(x1, x2) if (debug) printf (x1/
DEBUG_PRINT3	regex.c	/^#define DEBUG_PRINT3(x1, x2, x3) if (debug) printf/
DEBUG_PUSH	regex.c	/^#define DEBUG_PUSH(item)$/
DEBUG_STATEMENT	regex.c	/^#define DEBUG_STATEMENT(e) e$/
DOUBLE_FAILURE_STACK	regex.c	/^#define DOUBLE_FAILURE_STACK(failure_stack)				\\$/
EVER_MATCHED_SOMETHING	regex.c	/^#define EVER_MATCHED_SOMETHING(R)  ((R).bits.ever_/
EXTEND_BUFFER	regex.c	/^#define EXTEND_BUFFER()							\\$/
EXTRACT_NUMBER	regex.c	/^#define EXTRACT_NUMBER(destination, source)				\\$/
EXTRACT_NUMBER_AND_INCR	regex.c	/^#define EXTRACT_NUMBER_AND_INCR(destination, sourc/
FAILURE_STACK_EMPTY	regex.c	/^#define FAILURE_STACK_EMPTY()     (failure_stack.a/
FAILURE_STACK_FULL	regex.c	/^#define FAILURE_STACK_FULL()      (failure_stack.a/
FAILURE_STACK_PTR_EMPTY	regex.c	/^#define FAILURE_STACK_PTR_EMPTY() (failure_stack_p/
FAILURE_STACK_TOP	regex.c	/^#define FAILURE_STACK_TOP()       (failure_stack.s/
FREE_VARIABLES	regex.c	/^#define FREE_VARIABLES()						\\$/
GET_BUFFER_SPACE	regex.c	/^#define GET_BUFFER_SPACE(n)						\\$/
GET_UNSIGNED_NUMBER	regex.c	/^#define GET_UNSIGNED_NUMBER(num) 					\\$/
INIT_FAILURE_STACK	regex.c	/^#define INIT_FAILURE_STACK(failure_stack)				\\$/
IS_ACTIVE	regex.c	/^#define IS_ACTIVE(R)  ((R).bits.is_active)$/
IS_CHAR_CLASS	regex.c	/^#define IS_CHAR_CLASS(string)						\\$/
IS_IN_FIRST_STRING	regex.c	/^#define IS_IN_FIRST_STRING(ptr) 					\\$/
LETTER_P	regex.c	/^#define LETTER_P(d)							\\$/
MATCHED_SOMETHING	regex.c	/^#define MATCHED_SOMETHING(R)  ((R).bits.matched_so/
MAX	regex.c	/^#define MAX(a, b) ((a) > (b) ? (a) : (b))$/
MIN	regex.c	/^#define MIN(a, b) ((a) < (b) ? (a) : (b))$/
Mgetopt	getopt.c	/^main (argc, argv)$/
Mgetopt1	getopt1.c	/^main (argc, argv)$/
Mregex	regex.c	/^main (argc, argv)$/
PATFETCH	regex.c	/^#define PATFETCH(c)							\\$/
PATFETCH_RAW	regex.c	/^#define PATFETCH_RAW(c)							\\$/
PAT_PUSH	regex.c	/^#define PAT_PUSH(c)							\\$/
PAT_PUSH_2	regex.c	/^#define PAT_PUSH_2(c1, c2)						\\$/
PAT_PUSH_3	regex.c	/^#define PAT_PUSH_3(c1, c2, c3)						\\$/
POINTER_TO_OFFSET	regex.c	/^#define POINTER_TO_OFFSET(pointer) IS_IN_FIRST_STR/
POP_FAILURE_ITEM	regex.c	/^#define POP_FAILURE_ITEM()						\\$/
PUSH_FAILURE_ITEM	regex.c	/^#define PUSH_FAILURE_ITEM(item)						\\$/
PUSH_FAILURE_POINT	regex.c	/^#define PUSH_FAILURE_POINT(pattern_place, string_p/
PUSH_PATTERN_OP	regex.c	/^#define PUSH_PATTERN_OP(pattern_op, failure_stack)/
REGEX_REALLOCATE	regex.c	/^#define REGEX_REALLOCATE(source, size) (realloc (s/
REG_MATCH_NULL_STRING_P	regex.c	/^#define REG_MATCH_NULL_STRING_P(R)  ((R).bits.matc/
REG_UNSET	regex.c	/^#define REG_UNSET(e) ((e) == REG_UNSET_VALUE)$/
RETALLOC	regex.c	/^#define RETALLOC(addr, n, t) ((addr) = (t *) reall/
SET_LIST_BIT	regex.c	/^#define SET_LIST_BIT(c)  (b[(c) \/ BYTEWIDTH] |= 1/
SET_REGS_MATCHED	regex.c	/^#define SET_REGS_MATCHED()						\\$/
SIGN_EXTEND_CHAR	regex.c	/^#define SIGN_EXTEND_CHAR(c) (((c)^128) - 128) \/* /
SIG_beginCrSect	sighandle.c	/^void SIG_beginCrSect()$/
SIG_deregister	sighandle.c	/^int SIG_deregister(sig,fn)$/
SIG_endCrSect	sighandle.c	/^void SIG_endCrSect()$/
SIG_handle	sighandle.c	/^static SIGTYPE SIG_handle(sig)$/
SIG_init	sighandle.c	/^static int SIG_init()$/
SIG_register	sighandle.c	/^int SIG_register(sig,fn)$/
STORE_NUMBER	regex.c	/^#define STORE_NUMBER(destination, number)				\\$/
STORE_NUMBER_AND_INCR	regex.c	/^#define STORE_NUMBER_AND_INCR(destination, number)/
STREQ	regex.c	/^#define STREQ(s1, s2) ((strcmp (s1, s2) == 0))$/
SYNTAX	regex.c	/^#define SYNTAX(c) re_syntax_table[c]$/
TALLOC	regex.c	/^#define TALLOC(n, t) (t *) malloc ((n) * sizeof (t/
TRANSLATE	regex.c	/^#define TRANSLATE(d) (translate ? translate[(unsig/
VA_START	error.c	/^#define VA_START(args, lastarg) va_start(args, las/
alt_match_null_string_p	regex.c	/^alt_match_null_string_p (p, end, reg_info)$/
argmatch	argmatch.c	/^argmatch (arg, optlist)$/
assert	regex.c	/^#define assert(e)$/
at_endline_op_p	regex.c	/^at_endline_op_p (p, pend, syntax)$/
bcmp	regex.c	/^#define bcmp(s1,s2,n)	memcmp ((s1), (s2), (n))$/
bcmp_translate	regex.c	/^bcmp_translate (s1, s2, len, translate)$/
bcopy	getopt.c	/^#define bcopy(s, d, n) memcpy ((d), (s), (n))$/
bzero	regex.c	/^#define bzero(s,n)	memset ((s), 0, (n))$/
common_op_match_null_string_p	regex.c	/^common_op_match_null_string_p (p, end, reg_info)$/
compiled_pattern_printer	regex.c	/^compiled_pattern_printer (pbufp)$/
double_string_printer	regex.c	/^double_string_printer (where, string1, size1, stri/
error	error.c	/^error (status, errnum, message, va_alist)$/
exchange	getopt.c	/^exchange (argv)$/
extract_number	regex.c	/^extract_number (source)$/
extract_number_and_incr	regex.c	/^extract_number_and_incr (destination, source)$/
fnmatch	fnmatch.c	/^fnmatch (pattern, string, flags)$/
fperror	error.c	/^fperror (fp, status, errnum, message, va_alist)$/
gnu_getopt	getopt.c	/^gnu_getopt (argc, argv, optstring)$/
gnu_getopt_long	getopt1.c	/^gnu_getopt_long (argc, argv, options, long_options/
gnu_getopt_long_only	getopt1.c	/^gnu_getopt_long_only (argc, argv, options, long_op/
group_in_compile_stack	regex.c	/^group_in_compile_stack (compile_stack, regnum)$/
group_match_null_string_p	regex.c	/^group_match_null_string_p (p, end, reg_info)$/
init_syntax_once	regex.c	/^init_syntax_once ()$/
insert_jump	regex.c	/^insert_jump (op, from, to, current_end)$/
insert_jump_n	regex.c	/^insert_jump_n (op, from, to, current_end, n)$/
insert_op_2	regex.c	/^insert_op_2 (op, there, current_end, num_1, num_2)/
invalid_arg	argmatch.c	/^invalid_arg (kind, value, problem)$/
isblank	regex.c	/^#define isblank(c) ((c) == ' ' || (c) == '\\t')$/
isgraph	regex.c	/^#define isgraph(c) (isprint (c) && !isspace (c))$/
partial_compiled_pattern_printer	regex.c	/^partial_compiled_pattern_printer (pbufp, start, en/
pop_failure_point	regex.c	/^pop_failure_point (bufp, pattern_end, $/
print_buf	regex.c	/^print_buf (bufp)$/
printchar	regex.c	/^printchar (c)$/
re_comp	regex.c	/^re_comp (s)$/
re_compile_fastmap	regex.c	/^re_compile_fastmap (bufp)$/
re_compile_pattern	regex.c	/^re_compile_pattern (pattern, length, bufp)$/
re_exec	regex.c	/^re_exec (s)$/
re_match	regex.c	/^re_match (bufp, string, size, pos, regs)$/
re_match_2	regex.c	/^re_match_2 (bufp, string1, size1, string2, size2, /
re_search	regex.c	/^re_search (bufp, string, size, startpos, range, re/
re_search_2	regex.c	/^re_search_2 (bufp, string1, size1, string2, size2,/
re_set_syntax	regex.c	/^re_set_syntax (syntax)$/
regcomp	regex.c	/^regcomp (preg, pattern, cflags)$/
regerror	regex.c	/^regerror (errcode, preg, errbuf, errbuf_size)$/
regex_compile	regex.c	/^regex_compile (pattern, size, syntax, bufp)$/
regexec	regex.c	/^regexec (preg, string, nmatch, pmatch, eflags)$/
regfree	regex.c	/^regfree (preg)$/
remove_component	strippath.c	/^remove_component (beginc, endc)$/
store_jump	regex.c	/^store_jump (from, op, to)$/
store_jump_n	regex.c	/^store_jump_n (from, op, to, n)$/
strerror	error.c	/^strerror (errnum)$/
strip_path	strippath.c	/^strip_path (path)$/
strip_trailing_slashes	stripslash.c	/^strip_trailing_slashes (path)$/
yesno	yesno.c	/^yesno ()$/
