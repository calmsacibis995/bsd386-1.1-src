This is Info file gcc.info, produced by Makeinfo-1.54 from the input
file gcc.texi.

   This file documents the use and the internals of the GNU compiler.

   Published by the Free Software Foundation 675 Massachusetts Avenue
Cambridge, MA 02139 USA

   Copyright (C) 1988, 1989, 1992, 1993 Free Software Foundation, Inc.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided also
that the sections entitled "GNU General Public License" and "Protect
Your Freedom--Fight `Look And Feel'" are included exactly as in the
original, and provided that the entire resulting derived work is
distributed under the terms of a permission notice identical to this
one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that the sections entitled "GNU General Public
License" and "Protect Your Freedom--Fight `Look And Feel'", and this
permission notice, may be included in translations approved by the Free
Software Foundation instead of in the original English.


File: gcc.info,  Node: Installation,  Next: C Extensions,  Prev: Invoking GCC,  Up: Top

Installing GNU CC
*****************

   Here is the procedure for installing GNU CC on a Unix system.

* Menu:

* Other Dir::     Compiling in a separate directory (not where the source is).
* Cross-Compiler::   Building and installing a cross-compiler.
* PA Install::    See below for installation on the HP Precision Architecture.
* Sun Install::   See below for installation on the Sun.
* 3b1 Install::   See below for installation on the 3b1.
* Unos Install::  See below for installation on Unos (from CRDS).
* VMS Install::   See below for installation on VMS.
* WE32K Install:: See below for installation on the 3b* aside from the 3b1.
* MIPS Install::  See below for installation on the MIPS Architecture.
* Collect2::	  How `collect2' works; how it finds `ld'.
* Header Dirs::   Understanding the standard header file directories.

   You cannot install GNU C by itself on MSDOS; it will not compile
under any MSDOS compiler except itself.  You need to get the complete
compilation package DJGPP, which includes binaries as well as sources,
and includes all the necessary compilation tools and libraries.

  1. If you have built GNU CC previously in the same directory for a
     different target machine, do `make distclean' to delete all files
     that might be invalid.  One of the files this deletes is
     `Makefile'; if `make distclean' complains that `Makefile' does not
     exist, it probably means that the directory is already suitably
     clean.

  2. On a System V release 4 system, make sure `/usr/bin' precedes
     `/usr/ucb' in `PATH'.  The `cc' command in `/usr/ucb' uses
     libraries which have bugs.

  3. Specify the host and target machine configurations.  You do this by
     running the file `configure' with appropriate arguments.

     If you are building a compiler to produce code for the machine it
     runs on, specify just one machine type, with the `--target'
     option; the host type will default to be the same as the target.
     (For information on building a cross-compiler, see *Note
     Cross-Compiler::.)  Here is an example:

          configure --target=sparc-sun-sunos4.1

     If you run `configure' without specifying configuration arguments,
     `configure' tries to guess the type of host you are on, and uses
     that configuration type for both host and target.  So you don't
     need to specify a configuration, for building a native compiler,
     unless `configure' cannot figure out what your configuration is.

     A configuration name may be canonical or it may be more or less
     abbreviated.

     A canonical configuration name has three parts, separated by
     dashes.  It looks like this: `CPU-COMPANY-SYSTEM'.  (The three
     parts may themselves contain dashes; `configure' can figure out
     which dashes serve which purpose.)  For example,
     `m68k-sun-sunos4.1' specifies a Sun 3.

     You can also replace parts of the configuration by nicknames or
     aliases.  For example, `sun3' stands for `m68k-sun', so
     `sun3-sunos4.1' is another way to specify a Sun 3.  You can also
     use simply `sun3-sunos', since the version of SunOS is assumed by
     default to be version 4.  `sun3-bsd' also works, since `configure'
     knows that the only BSD variant on a Sun 3 is SunOS.

     You can specify a version number after any of the system types,
     and some of the CPU types.  In most cases, the version is
     irrelevant, and will be ignored.  So you might as well specify the
     version if you know it.

     Here are the possible CPU types:

          a29k, alpha, arm, cN, clipper, elxsi, h8300, hppa1.0, hppa1.1,
          i370, i386, i486, i860, i960, m68000, m68k, m88k, mips,
          ns32k, pyramid, romp, rs6000, sh, sparc, sparclite, vax,
          we32k.

     Here are the recognized company names.  As you can see, customary
     abbreviations are used rather than the longer official names.

          alliant, altos, apollo, att, bull, cbm, convergent, convex,
          crds, dec, dg, dolphin, elxsi, encore, harris, hitachi, hp,
          ibm, intergraph, isi, mips, motorola, ncr, next, ns, omron,
          plexus, sequent, sgi, sony, sun, tti, unicom.

     The company name is meaningful only to disambiguate when the rest
     of the information supplied is insufficient.  You can omit it,
     writing just `CPU-SYSTEM', if it is not needed.  For example,
     `vax-ultrix4.2' is equivalent to `vax-dec-ultrix4.2'.

     Here is a list of system types:

          aix, acis, aos, bsd, clix, ctix, dgux, dynix, genix, hpux,
          isc, linux, luna, lynxos, mach, minix, newsos, osf, osfrose,
          riscos, sco, solaris, sunos, sysv, ultrix, unos, vms.

     You can omit the system type; then `configure' guesses the
     operating system from the CPU and company.

     You can add a version number to the system type; this may or may
     not make a difference.  For example, you can write `bsd4.3' or
     `bsd4.4' to distinguish versions of BSD.  In practice, the version
     number is most needed for `sysv3' and `sysv4', which are often
     treated differently.

     If you specify an impossible combination such as `i860-dg-vms',
     then you may get an error message from `configure', or it may
     ignore part of the information and do the best it can with the
     rest.  `configure' always prints the canonical name for the
     alternative that it used.

     Often a particular model of machine has a name.  Many machine
     names are recognized as aliases for CPU/company combinations.
     Thus, the machine name `sun3', mentioned above, is an alias for
     `m68k-sun'.  Sometimes we accept a company name as a machine name,
     when the name is popularly used for a particular machine.  Here is
     a table of the known machine names:

          3300, 3b1, 3bN, 7300, altos3068, altos, apollo68, att-7300,
          balance, convex-cN, crds, decstation-3100, decstation, delta,
          encore, fx2800, gmicro, hp7NN, hp8NN, hp9k2NN, hp9k3NN,
          hp9k7NN, hp9k8NN, iris4d, iris, isi68, m3230, magnum, merlin,
          miniframe, mmax, news-3600, news800, news, next, pbd, pc532,
          pmax, ps2, risc-news, rtpc, sun2, sun386i, sun386, sun3,
          sun4, symmetry, tower-32, tower.

     Remember that a machine name specifies both the cpu type and the
     company name.

     There are four additional options you can specify independently to
     describe variant hardware and software configurations.  These are
     `--with-gnu-as', `--with-gnu-ld', `--with-stabs' and `--nfp'.

    `--with-gnu-as'
          If you will use GNU CC with the GNU assembler (GAS), you
          should declare this by using the `--with-gnu-as' option when
          you run `configure'.

          Using this option does not install GAS.  It only modifies the
          output of GNU CC to work with GAS.  Building and installing
          GAS is up to you.

          Conversely, if you *do not* wish to use GAS and do not specify
          `--with-gnu-as' when building GNU CC, it is up to you to make
          sure that GAS is not installed.  GNU CC searches for a
          program named `as' in various directories; if the program it
          finds is GAS, then it runs GAS.  If you are not sure where
          GNU CC finds the assembler it is using, try specifying `-v'
          when you run it.

          The systems where it makes a difference whether you use GAS
          are
          `hppa1.0-ANY-ANY', `hppa1.1-ANY-ANY', `i386-ANY-sysv',
          `i386-ANY-isc',
          `i860-ANY-bsd', `m68k-bull-sysv', `m68k-hp-hpux',
          `m68k-sony-bsd',
          `m68k-altos-sysv', `m68000-hp-hpux', `m68000-att-sysv', and
          `mips-ANY').  On any other system, `--with-gnu-as' has no
          effect.

          On the systems listed above (except for the HP-PA and for ISC
          on the 386), if you use GAS, you should also use the GNU
          linker (and specify `--with-gnu-ld').

    `--with-gnu-ld'
          Specify the option `--with-gnu-ld' if you plan to use the GNU
          linker with GNU CC.

          This option does not cause the GNU linker to be installed; it
          just modifies the behavior of GNU CC to work with the GNU
          linker.  Specifically, it inhibits the installation of
          `collect2', a program which otherwise serves as a front-end
          for the system's linker on most configurations.

    `--with-stabs'
          On MIPS based systems and on Alphas, you must specify whether
          you want GNU CC to create the normal ECOFF debugging format,
          or to use BSD-style stabs passed through the ECOFF symbol
          table.  The normal ECOFF debug format cannot fully handle
          languages other than C.  BSD stabs format can handle other
          languages, but it only works with the GNU debugger GDB.

          Normally, GNU CC uses the ECOFF debugging format by default;
          if you prefer BSD stabs, specify `--with-stabs' when you
          configure GNU CC.

          No matter which default you choose when you configure GNU CC,
          the user can use the `-gcoff' and `-gstabs+' options to
          specify explicitly the debug format for a particular
          compilation.

          `--with-stabs' is meaningful on the ISC system on the 386,
          also, if `--with-gas' is used.  It selects use of stabs
          debugging information embedded in COFF output.  This kind of
          debugging information supports C++ well; ordinary COFF
          debugging information does not.

    `--nfp'
          On certain systems, you must specify whether the machine has
          a floating point unit.  These systems include
          `m68k-sun-sunosN' and `m68k-isi-bsd'.  On any other system,
          `--nfp' currently has no effect, though perhaps there are
          other systems where it could usefully make a difference.

     If you want to install your own homemade configuration files, you
     can use `local' as the company name to access them.  If you use
     configuration `CPU-local', the configuration name without the cpu
     prefix is used to form the configuration file names.

     Thus, if you specify `m68k-local', configuration uses files
     `local.md', `local.h', `local.c', `xm-local.h', `t-local', and
     `x-local', all in the directory `config/m68k'.

     Here is a list of configurations that have special treatment or
     special things you must know:

    `alpha-*-osf1'
          Systems using processors that implement the DEC Alpha
          architecture and are running the OSF/1 operating system, for
          example the DEC Alpha AXP systems.  (VMS on the Alpha is not
          currently supported by GNU CC.)

          Objective C and C++ do not yet work on the Alpha.  We hope to
          support C++ in version 2.6.

          GNU CC writes a `.verstamp' directive to the assembler output
          file unless it is built as a cross-compiler.  It gets the
          version to use from the system header file
          `/usr/include/stamp.h'.  If you install a new version of
          OSF/1, you should rebuild GCC to pick up the new version
          stamp.

          Note that since the Alpha is a 64-bit architecture,
          cross-compilers from 32-bit machines will not generate as
          efficient code as that generated when the compiler is running
          on a 64-bit machine because many optimizations that depend on
          being able to represent a word on the target in an integral
          value on the host cannot be performed.  Building
          cross-compilers on the Alpha for 32-bit machines has only
          been tested in a few cases and may not work properly.

          `make compare' may fail on some versions of OSF/1 unless you
          add `-save-temps' to `CFLAGS'.  The same problem occurs on
          Irix version 5.1.1.  On these systems, the name of the
          assembler input file is stored in the object file, and that
          makes comparison fail if it differs between the `stage1' and
          `stage2' compilations.  The option `-save-temps' forces a
          fixed name to be used for the assembler input file, instead
          of a randomly chosen name in `/tmp'.

          GNU CC now supports both the native (ECOFF) debugging format
          used by DBX and GDB and an encapsulated STABS format for use
          only with GDB.  See the discussion of the `--with-stabs'
          option of `configure' above for more information on these
          formats and how to select them.

          There is a bug in DEC's assembler that produces incorrect
          line numbers for ECOFF format when the `.align' directive is
          used.  To work around this problem, GNU CC will not emit such
          alignment directives even if optimization is being performed
          if it is writing ECOFF format debugging information.
          Unfortunately, this has the very undesirable side-effect that
          code addresses when `-O' is specified are different depending
          on whether or not `-g' is also specified.

          To avoid this behavior, specify `-gstabs+' and use GDB
          instead of DBX.  DEC is now aware of this problem with the
          assembler and hopes to provide a fix shortly.

    `a29k'
          AMD Am29k-family processors.  These are normally used in
          embedded applications.  There are no standard Unix
          configurations.  This configuration corresponds to AMD's
          standard calling sequence and binary interface and is
          compatible with other 29k tools.

          You may need to make a variant of the file `a29k.h' for your
          particular configuration.

    `a29k-*-bsd'
          AMD Am29050 used in a system running a variant of BSD Unix.

    `elxsi-elxsi-bsd'
          The Elxsi's C compiler has known limitations that prevent it
          from compiling GNU C.  Please contact `mrs@cygnus.com' for
          more details.

    `hppa*-*-*'
          Using GAS is highly recommended for all HP-PA configurations.
          See *Note PA Install:: for the special procedures needed to
          compile GNU CC for the HP-PA.

    `i386-*-sco'
          Compilation with RCC is recommended.  Also, it may be a good
          idea to link with GNU malloc instead of the malloc that comes
          with the system.

    `i386-*-sco3.2.4'
          Use this configuration for SCO release 3.2 version 4.

    `i386-*-isc'
          It may be good idea to link with GNU malloc instead of the
          malloc that comes with the system.

    `i386-*-esix'
          It may be good idea to link with GNU malloc instead of the
          malloc that comes with the system.

    `i386-ibm-aix'
          You need to use GAS version 2.1 or later, and and LD from GNU
          binutils version 2.2 or later.

    `i386-sequent'
          Go to the Berkeley universe before compiling.  In addition,
          you probably need to create a file named `string.h'
          containing just one line: `#include <strings.h>'.

    `i386-sun-sunos4'
          You may find that you need another version of GNU CC to begin
          bootstrapping with, since the current version when built with
          the system's own compiler seems to get an infinite loop
          compiling part of `libgcc2.c'.  GNU CC version 2 compiled
          with GNU CC (any version) seems not to have this problem.

    `i860-intel-osf1'
          This is the Paragon.  If you have version 1.0 of the
          operating system, see *Note Installation Problems::, for
          special things you need to do to compensate for peculiarities
          in the system.

    `m68000-att'
          AT&T 3b1, a.k.a. 7300 PC.  Special procedures are needed to
          compile GNU CC with this machine's standard C compiler, due
          to bugs in that compiler.  *Note 3b1 Install::.  You can
          bootstrap it more easily with previous versions of GNU CC if
          you have them.

    `m68000-hp-bsd'
          HP 9000 series 200 running BSD.  Note that the C compiler
          that comes with this system cannot compile GNU CC; contact
          `law@cs.utah.edu' to get binaries of GNU CC for bootstrapping.

    `m68k-altos'
          Altos 3068.  You must use the GNU assembler, linker and
          debugger.  Also, you must fix a kernel bug.  Details in the
          file `README.ALTOS'.

    `m68k-bull-sysv'
          Bull DPX/2 series 200 and 300 with BOS-2.00.45 up to
          BOS-2.01. GNU CC works either with native assembler or GNU
          assembler. You can use GNU assembler with native coff
          generation by providing `--gas' to the configure script or
          use GNU assembler with dbx-in-coff encapsulation by providing
          `--gas --stabs'. For any problem with native assembler or for
          availability of the DPX/2 port of GAS, contact
          `F.Pierresteguy@frcl.bull.fr'.

    `m68k-hp-hpux'
          HP 9000 series 300 or 400 running HP-UX.  HP-UX version 8.0
          has a bug in the assembler that prevents compilation of GNU
          CC.  To fix it, get patch PHCO_0800 from HP.

          In addition, `--gas' does not currently work with this
          configuration.  Changes in HP-UX have broken the library
          conversion tool and the linker.

    `m68k-sun'
          Sun 3.  We do not provide a configuration file to use the Sun
          FPA by default, because programs that establish signal
          handlers for floating point traps inherently cannot work with
          the FPA.

    `m88k-*-svr3'
          Motorola m88k running the AT&T/Unisoft/Motorola V.3 reference
          port.  These systems tend to use the Green Hills C, revision
          1.8.5, as the standard C compiler.  There are apparently bugs
          in this compiler that result in object files differences
          between stage 2 and stage 3.  If this happens, make the stage
          4 compiler and compare it to the stage 3 compiler.  If the
          stage 3 and stage 4 object files are identical, this suggests
          you encountered a problem with the standard C compiler; the
          stage 3 and 4 compilers may be usable.

          It is best, however, to use an older version of GNU CC for
          bootstrapping if you have one.

    `m88k-*-dgux'
          Motorola m88k running DG/UX.  To build native or cross
          compilers on DG/UX, you must first change to the 88open BCS
          software development environment.  This is done by issuing
          this command:

               eval `sde-target m88kbcs`

    `m88k-tektronix-sysv3'
          Tektronix XD88 running UTekV 3.2e.  Do not turn on
          optimization while building stage1 if you bootstrap with the
          buggy Green Hills compiler.  Also, The bundled LAI System V
          NFS is buggy so if you build in an NFS mounted directory,
          start from a fresh reboot, or avoid NFS all together.
          Otherwise you may have trouble getting clean comparisons
          between stages.

    `mips-mips-bsd'
          MIPS machines running the MIPS operating system in BSD mode.
          It's possible that some old versions of the system lack the
          functions `memcpy', `memcmp', and `memset'.  If your system
          lacks these, you must remove or undo the definition of
          `TARGET_MEM_FUNCTIONS' in `mips-bsd.h'.

    `mips-sgi-*'
          Silicon Graphics MIPS machines running IRIX.  In order to
          compile GCC on an SGI the "c.hdr.lib" option must be
          installed from the CD-ROM supplied from Silicon Graphics.
          This is found on the 2nd CD in release 4.0.1.

    `mips-sony-sysv'
          Sony MIPS NEWS.  This works in NEWSOS 5.0.1, but not in 5.0.2
          (which uses ELF instead of COFF).  Support for 5.0.2 will
          probably be provided soon by volunteers.  In particular, the
          linker does not like the code generated by GCC when shared
          libraries are linked in.

    `ns32k-encore'
          Encore ns32000 system.  Encore systems are supported only
          under BSD.

    `ns32k-*-genix'
          National Semiconductor ns32000 system.  Genix has bugs in
          `alloca' and `malloc'; you must get the compiled versions of
          these from GNU Emacs.

    `ns32k-sequent'
          Go to the Berkeley universe before compiling.  In addition,
          you probably need to create a file named `string.h'
          containing just one line: `#include <strings.h>'.

    `ns32k-utek'
          UTEK ns32000 system ("merlin").  The C compiler that comes
          with this system cannot compile GNU CC; contact
          `tektronix!reed!mason' to get binaries of GNU CC for
          bootstrapping.

    `romp-*-aos'
    `romp-*-mach'
          The only operating systems supported for the IBM RT PC are
          AOS and MACH.  GNU CC does not support AIX running on the RT.
          We recommend you compile GNU CC with an earlier version of
          itself; if you compile GNU CC with `hc', the Metaware
          compiler, it will work, but you will get mismatches between
          the stage 2 and stage 3 compilers in various files.  These
          errors are minor differences in some floating-point constants
          and can be safely ignored; the stage 3 compiler is correct.

    `rs6000-*-aix'
          *Read the file `README.RS6000' for information on how to get
          a fix for problems in the IBM assembler that interfere with
          GNU CC.* You must either obtain the new assembler or avoid
          using the `-g' switch.  Note that `Makefile.in' uses `-g' by
          default when compiling `libgcc2.c'.

          The PowerPC and POWER2 architectures are now supported, but
          have not been extensively tested due to lack of appropriate
          systems.  Only AIX is supported on the PowerPC.

          Objective C does not work on this architecture.

          XLC version 1.3.0.0 will miscompile `jump.c'.  XLC version
          1.3.0.1 or later fixes this problem.  We do not yet have a
          PTF number for this fix.

    `vax-dec-ultrix'
          Don't try compiling with Vax C (`vcc').  It produces
          incorrect code in some cases (for example, when `alloca' is
          used).

          Meanwhile, compiling `cp-parse.c' with pcc does not work
          because of an internal table size limitation in that
          compiler.  To avoid this problem, compile just the GNU C
          compiler first, and use it to recompile building all the
          languages that you want to run.

     Here we spell out what files will be set up by `configure'.
     Normally you need not be concerned with these files.

        * A symbolic link named `config.h' is made to the top-level
          config file for the machine you will run the compiler on
          (*note Config::.).  This file is responsible for defining
          information about the host machine.  It includes `tm.h'.

          The top-level config file is located in the subdirectory
          `config'.  Its name is always `xm-SOMETHING.h'; usually
          `xm-MACHINE.h', but there are some exceptions.

          If your system does not support symbolic links, you might
          want to set up `config.h' to contain a `#include' command
          which refers to the appropriate file.

        * A symbolic link named `tconfig.h' is made to the top-level
          config file for your target machine.  This is used for
          compiling certain programs to run on that machine.

        * A symbolic link named `tm.h' is made to the
          machine-description macro file for your target machine.  It
          should be in the subdirectory `config' and its name is often
          `MACHINE.h'.

        * A symbolic link named `md' will be made to the machine
          description pattern file.  It should be in the `config'
          subdirectory and its name should be `MACHINE.md'; but MACHINE
          is often not the same as the name used in the `tm.h' file
          because the `md' files are more general.

        * A symbolic link named `aux-output.c' will be made to the
          output subroutine file for your machine.  It should be in the
          `config' subdirectory and its name should be `MACHINE.c'.

        * The command file `configure' also constructs the file
          `Makefile' by adding some text to the template file
          `Makefile.in'.  The additional text comes from files in the
          `config' directory, named `t-TARGET' and `x-HOST'.  If these
          files do not exist, it means nothing needs to be added for a
          given target or host.

  4. The standard directory for installing GNU CC is `/usr/local/lib'.
     If you want to install its files somewhere else, specify
     `--prefix=DIR' when you run `configure'.  Here DIR is a directory
     name to use instead of `/usr/local' for all purposes with one
     exception: the directory `/usr/local/include' is searched for
     header files no matter where you install the compiler.

  5. Specify `--local-prefix=DIR' if you want the compiler to search
     directory `DIR/include' for header files *instead* of
     `/usr/local/include'.  (This is for systems that have different
     conventions for where to put site-specific things.)

     Unless you have a convention other than `/usr/local' for
     site-specific files, it is a bad idea to specify `--local-prefix'.

  6. Make sure the Bison parser generator is installed.  (This is
     unnecessary if the Bison output files `c-parse.c' and `cexp.c' are
     more recent than `c-parse.y' and `cexp.y' and you do not plan to
     change the `.y' files.)

     Bison versions older than Sept 8, 1988 will produce incorrect
     output for `c-parse.c'.

  7. If you have chosen a configuration for GNU CC which requires other
     GNU tools (such as GAS or the GNU linker) instead of the standard
     system tools, install the required tools in the build directory
     under the names `as', `ld' or whatever is appropriate.  This will
     enable the compiler to find the proper tools for compilation of
     the program `enquire'.

     Alternatively, you can do subsequent compilation using a value of
     the `PATH' environment variable such that the necessary GNU tools
     come before the standard system tools.

  8. Build the compiler.  Just type `make LANGUAGES=c' in the compiler
     directory.

     `LANGUAGES=c' specifies that only the C compiler should be
     compiled.  The makefile normally builds compilers for all the
     supported languages; currently, C, C++ and Objective C.  However,
     C is the only language that is sure to work when you build with
     other non-GNU C compilers.  In addition, building anything but C
     at this stage is a waste of time.

     In general, you can specify the languages to build by typing the
     argument `LANGUAGES="LIST"', where LIST is one or more words from
     the list `c', `c++', and `objective-c'.

     Ignore any warnings you may see about "statement not reached" in
     `insn-emit.c'; they are normal.  Also, warnings about "unknown
     escape sequence" are normal in `genopinit.c' and perhaps some
     other files.  Any other compilation errors may represent bugs in
     the port to your machine or operating system, and should be
     investigated and reported (*note Bugs::.).

     Some commercial compilers fail to compile GNU CC because they have
     bugs or limitations.  For example, the Microsoft compiler is said
     to run out of macro space.  Some Ultrix compilers run out of
     expression space; then you need to break up the statement where
     the problem happens.

     If you are building with a previous GNU C compiler, do not use
     `CC=gcc' on the make command or by editing the Makefile.  Instead,
     use a full pathname to specify the compiler, such as
     `CC=/usr/local/bin/gcc'.  This is because make might execute the
     `gcc' in the current directory before all of the compiler
     components have been built.

  9. If you are building a cross-compiler, stop here.  *Note
     Cross-Compiler::.

 10. Move the first-stage object files and executables into a
     subdirectory with this command:

          make stage1

     The files are moved into a subdirectory named `stage1'.  Once
     installation is complete, you may wish to delete these files with
     `rm -r stage1'.

 11. If you have chosen a configuration for GNU CC which requires other
     GNU tools (such as GAS or the GNU linker) instead of the standard
     system tools, install the required tools in the `stage1'
     subdirectory under the names `as', `ld' or whatever is
     appropriate.  This will enable the stage 1 compiler to find the
     proper tools in the following stage.

     Alternatively, you can do subsequent compilation using a value of
     the `PATH' environment variable such that the necessary GNU tools
     come before the standard system tools.

 12. Recompile the compiler with itself, with this command:

          make CC="stage1/xgcc -Bstage1/" CFLAGS="-g -O"

     This is called making the stage 2 compiler.

     The command shown above builds compilers for all the supported
     languages.  If you don't want them all, you can specify the
     languages to build by typing the argument `LANGUAGES="LIST"'.  LIST
     should contain one or more words from the list `c', `c++',
     `objective-c', and `proto'.  Separate the words with spaces.
     `proto' stands for the programs `protoize' and `unprotoize'; they
     are not a separate language, but you use `LANGUAGES' to enable or
     disable their installation.

     If you are going to build the stage 3 compiler, then you might
     want to build only the C language in stage 2.

     Once you have built the stage 2 compiler, if you are short of disk
     space, you can delete the subdirectory `stage1'.

     On a 68000 or 68020 system lacking floating point hardware, unless
     you have selected a `tm.h' file that expects by default that there
     is no such hardware, do this instead:

          make CC="stage1/xgcc -Bstage1/" CFLAGS="-g -O -msoft-float"

 13. If you wish to test the compiler by compiling it with itself one
     more time, install any other necessary GNU tools (such as GAS or
     the GNU linker) in the `stage2' subdirectory as you did in the
     `stage1' subdirectory, then do this:

          make stage2
          make CC="stage2/xgcc -Bstage2/" CFLAGS="-g -O"

     This is called making the stage 3 compiler.  Aside from the `-B'
     option, the compiler options should be the same as when you made
     the stage 2 compiler.  But the `LANGUAGES' option need not be the
     same.  The command shown above builds compilers for all the
     supported languages; if you don't want them all, you can specify
     the languages to build by typing the argument `LANGUAGES="LIST"',
     as described above.

     Then compare the latest object files with the stage 2 object
     files--they ought to be identical, aside from time stamps (if any).

     On some systems, meaningful comparison of object files is
     impossible; they always appear "different."  This is currently
     true on Solaris and probably on all systems that use ELF object
     file format.  Some other systems where this is so are listed below.

     Use this command to compare the files:

          make compare

     This will mention any object files that differ between stage 2 and
     stage 3.  Any difference, no matter how innocuous, indicates that
     the stage 2 compiler has compiled GNU CC incorrectly, and is
     therefore a potentially serious bug which you should investigate
     and report (*note Bugs::.).

     If your system does not put time stamps in the object files, then
     this is a faster way to compare them (using the Bourne shell):

          for file in *.o; do
          cmp $file stage2/$file
          done

     If you have built the compiler with the `-mno-mips-tfile' option on
     MIPS machines, you will not be able to compare the files.

     The Alpha stores file names of internal temporary files in the
     object files and `make compare' does not know how to ignore them,
     so normally you cannot compare on the Alpha.  However, if you use
     the `-save-temps' option when compiling *both* stage 2 and stage
     3, this causes the same file names to be used in both stages; then
     you can do the comparison.

 14. Build the Objective C library (if you have built the Objective C
     compiler).  Here is the command to do this:

          make objc-runtime CC="stage2/xgcc -Bstage2/" CFLAGS="-g -O"

 15. Install the compiler driver, the compiler's passes and run-time
     support with `make install'.  Use the same value for `CC',
     `CFLAGS' and `LANGUAGES' that you used when compiling the files
     that are being installed.  One reason this is necessary is that
     some versions of Make have bugs and recompile files gratuitously
     when you do this step.  If you use the same variable values, those
     files will be recompiled properly.

     For example, if you have built the stage 2 compiler, you can use
     the following command:

          make install CC="stage2/xgcc -Bstage2/" CFLAGS="-g -O" LANGUAGES="LIST"

     This copies the files `cc1', `cpp' and `libgcc.a' to files `cc1',
     `cpp' and `libgcc.a' in the directory
     `/usr/local/lib/gcc-lib/TARGET/VERSION', which is where the
     compiler driver program looks for them.  Here TARGET is the target
     machine type specified when you ran `configure', and VERSION is
     the version number of GNU CC.  This naming scheme permits various
     versions and/or cross-compilers to coexist.

     This also copies the driver program `xgcc' into
     `/usr/local/bin/gcc', so that it appears in typical execution
     search paths.

     On some systems, this command causes recompilation of some files.
     This is usually due to bugs in `make'.  You should either ignore
     this problem, or use GNU Make.

     *Warning: there is a bug in `alloca' in the Sun library.  To avoid
     this bug, be sure to install the executables of GNU CC that were
     compiled by GNU CC.  (That is, the executables from stage 2 or 3,
     not stage 1.)  They use `alloca' as a built-in function and never
     the one in the library.*

     (It is usually better to install GNU CC executables from stage 2
     or 3, since they usually run faster than the ones compiled with
     some other compiler.)

 16. Install the Objective C library (if you are installing the
     Objective C compiler).  Here is the command to do this:

          make install-libobjc CC="stage2/xgcc -Bstage2/" CFLAGS="-g -O"

 17. If you're going to use C++, it's likely that you need to also
     install the libg++ distribution.  It should be available from the
     same place where you got the GNU C distribution.  Just as GNU C
     does not distribute a C runtime library, it also does not include
     a C++ run-time library.  All I/O functionality, special class
     libraries, etc., are available in the libg++ distribution.


File: gcc.info,  Node: Other Dir,  Next: Cross-Compiler,  Up: Installation

Compilation in a Separate Directory
===================================

   If you wish to build the object files and executables in a directory
other than the one containing the source files, here is what you must
do differently:

  1. Make sure you have a version of Make that supports the `VPATH'
     feature.  (GNU Make supports it, as do Make versions on most BSD
     systems.)

  2. If you have ever run `configure' in the source directory, you must
     undo the configuration.  Do this by running:

          make distclean

  3. Go to the directory in which you want to build the compiler before
     running `configure':

          mkdir gcc-sun3
          cd gcc-sun3

     On systems that do not support symbolic links, this directory must
     be on the same file system as the source code directory.

  4. Specify where to find `configure' when you run it:

          ../gcc/configure ...

     This also tells `configure' where to find the compiler sources;
     `configure' takes the directory from the file name that was used to
     invoke it.  But if you want to be sure, you can specify the source
     directory with the `--srcdir' option, like this:

          ../gcc/configure --srcdir=../gcc sun3

     The directory you specify with `--srcdir' need not be the same as
     the one that `configure' is found in.

   Now, you can run `make' in that directory.  You need not repeat the
configuration steps shown above, when ordinary source files change.  You
must, however, run `configure' again when the configuration files
change, if your system does not support symbolic links.


File: gcc.info,  Node: Cross-Compiler,  Next: PA Install,  Prev: Other Dir,  Up: Installation

Building and Installing a Cross-Compiler
========================================

   GNU CC can function as a cross-compiler for many machines, but not
all.

   * Cross-compilers for the Mips as target using the Mips assembler
     currently do not work, because the auxiliary programs
     `mips-tdump.c' and `mips-tfile.c' can't be compiled on anything
     but a Mips.  It does work to cross compile for a Mips if you use
     the GNU assembler and linker.

   * Cross-compilers between machines with different floating point
     formats have not all been made to work.  GNU CC now has a floating
     point emulator with which these can work, but each target machine
     description needs to be updated to take advantage of it.

   * Cross-compilation between machines of different word sizes has not
     really been addressed yet.

   Since GNU CC generates assembler code, you probably need a
cross-assembler that GNU CC can run, in order to produce object files.
If you want to link on other than the target machine, you need a
cross-linker as well.  You also need header files and libraries suitable
for the target machine that you can install on the host machine.

* Menu:

* Steps of Cross::      Using a cross-compiler involves several steps
                          that may be carried out on different machines.
* Configure Cross::     Configuring a cross-compiler.
* Tools and Libraries:: Where to put the linker and assembler, and the C library.
* Cross Headers::       Finding and installing header files
                          for a cross-compiler.
* Cross Runtime::       Supplying arithmetic runtime routines (`libgcc1.a').
* Build Cross::         Actually compiling the cross-compiler.


File: gcc.info,  Node: Steps of Cross,  Next: Configure Cross,  Up: Cross-Compiler

Steps of Cross-Compilation
--------------------------

   To compile and run a program using a cross-compiler involves several
steps:

   * Run the cross-compiler on the host machine to produce assembler
     files for the target machine.  This requires header files for the
     target machine.

   * Assemble the files produced by the cross-compiler.  You can do this
     either with an assembler on the target machine, or with a
     cross-assembler on the host machine.

   * Link those files to make an executable.  You can do this either
     with a linker on the target machine, or with a cross-linker on the
     host machine.  Whichever machine you use, you need libraries and
     certain startup files (typically `crt....o') for the target
     machine.

   It is most convenient to do all of these steps on the same host
machine, since then you can do it all with a single invocation of GNU
CC.  This requires a suitable cross-assembler and cross-linker.  For
some targets, the GNU assembler and linker are available.


File: gcc.info,  Node: Configure Cross,  Next: Tools and Libraries,  Prev: Steps of Cross,  Up: Cross-Compiler

Configuring a Cross-Compiler
----------------------------

   To build GNU CC as a cross-compiler, you start out by running
`configure'.  You must specify two different configurations, the host
and the target.  Use the `--host=HOST' option for the host and
`--target=TARGET' to specify the target type.  For example, here is how
to configure for a cross-compiler that runs on a hypothetical Intel 386
system and produces code for an HP 68030 system running BSD:

     configure --target=m68k-hp-bsd4.3 --host=i386-bozotheclone-bsd4.3


File: gcc.info,  Node: Tools and Libraries,  Next: Cross Headers,  Prev: Configure Cross,  Up: Cross-Compiler

Tools and Libraries for a Cross-Compiler
----------------------------------------

   If you have a cross-assembler and cross-linker available, you should
install them now.  Put them in the directory `/usr/local/TARGET/bin'.
Here is a table of the tools you should put in this directory:

`as'
     This should be the cross-assembler.

`ld'
     This should be the cross-linker.

`ar'
     This should be the cross-archiver: a program which can manipulate
     archive files (linker libraries) in the target machine's format.

`ranlib'
     This should be a program to construct a symbol table in an archive
     file.

   The installation of GNU CC will find these programs in that
directory, and copy or link them to the proper place to for the
cross-compiler to find them when run later.

   The easiest way to provide these files is to build the Binutils
package and GAS.  Configure them with the same `--host' and `--target'
options that you use for configuring GNU CC, then build and install
them.  They install their executables automatically into the proper
directory.  Alas, they do not support all the targets that GNU CC
supports.

   If you want to install libraries to use with the cross-compiler,
such as a standard C library, put them in the directory
`/usr/local/TARGET/lib'; installation of GNU CC copies all all the
files in that subdirectory into the proper place for GNU CC to find
them and link with them.  Here's an example of copying some libraries
from a target machine:

     ftp TARGET-MACHINE
     lcd /usr/local/TARGET/lib
     cd /lib
     get libc.a
     cd /usr/lib
     get libg.a
     get libm.a
     quit

The precise set of libraries you'll need, and their locations on the
target machine, vary depending on its operating system.

   Many targets require "start files" such as `crt0.o' and `crtn.o'
which are linked into each executable; these too should be placed in
`/usr/local/TARGET/lib'.  There may be several alternatives for
`crt0.o', for use with profiling or other compilation options.  Check
your target's definition of `STARTFILE_SPEC' to find out what start
files it uses.  Here's an example of copying these files from a target
machine:

     ftp TARGET-MACHINE
     lcd /usr/local/TARGET/lib
     prompt
     cd /lib
     mget *crt*.o
     cd /usr/lib
     mget *crt*.o
     quit


File: gcc.info,  Node: Cross Runtime,  Next: Build Cross,  Prev: Cross Headers,  Up: Cross-Compiler

`libgcc.a' and Cross-Compilers
------------------------------

   Code compiled by GNU CC uses certain runtime support functions
implicitly.  Some of these functions can be compiled successfully with
GNU CC itself, but a few cannot be.  These problem functions are in the
source file `libgcc1.c'; the library made from them is called
`libgcc1.a'.

   When you build a native compiler, these functions are compiled with
some other compiler-the one that you use for bootstrapping GNU CC.
Presumably it knows how to open code these operations, or else knows how
to call the run-time emulation facilities that the machine comes with.
But this approach doesn't work for building a cross-compiler.  The
compiler that you use for building knows about the host system, not the
target system.

   So, when you build a cross-compiler you have to supply a suitable
library `libgcc1.a' that does the job it is expected to do.

   To compile `libgcc1.c' with the cross-compiler itself does not work.
The functions in this file are supposed to implement arithmetic
operations that GNU CC does not know how to open code, for your target
machine.  If these functions are compiled with GNU CC itself, they will
compile into infinite recursion.

   On any given target, most of these functions are not needed.  If GNU
CC can open code an arithmetic operation, it will not call these
functions to perform the operation.  It is possible that on your target
machine, none of these functions is needed.  If so, you can supply an
empty library as `libgcc1.a'.

   Many targets need library support only for multiplication and
division.  If you are linking with a library that contains functions for
multiplication and division, you can tell GNU CC to call them directly
by defining the macros `MULSI3_LIBCALL', and the like.  These macros
need to be defined in the target description macro file.  For some
targets, they are defined already.  This may be sufficient to avoid the
need for libgcc1.a; if so, you can supply an empty library.

   Some targets do not have floating point instructions; they need other
functions in `libgcc1.a', which do floating arithmetic.  Recent
versions of GNU CC have a file which emulates floating point.  With a
certain amount of work, you should be able to construct a floating
point emulator that can be used as `libgcc1.a'.  Perhaps future
versions will contain code to do this automatically and conveniently.
That depends on whether someone wants to implement it.

   If your target system has another C compiler, you can configure GNU
CC as a native compiler on that machine, build just `libgcc1.a' with
`make libgcc1.a' on that machine, and use the resulting file with the
cross-compiler.  To do this, execute the following on the target
machine:

     cd TARGET-BUILD-DIR
     configure --host=sparc --target=sun3
     make libgcc1.a

And then this on the host machine:

     ftp TARGET-MACHINE
     binary
     cd TARGET-BUILD-DIR
     get libgcc1.a
     quit

   Another way to provide the functions you need in `libgcc1.a' is to
define the appropriate `perform_...' macros for those functions.  If
these definitions do not use the C arithmetic operators that they are
meant to implement, you should be able to compile them with the
cross-compiler you are building.  (If these definitions already exist
for your target file, then you are all set.)

   To build `libgcc1.a' using the perform macros, use
`LIBGCC1=libgcc1.a OLDCC=./xgcc' when building the compiler.
Otherwise, you should place your replacement library under the name
`libgcc1.a' in the directory in which you will build the
cross-compiler, before you run `make'.


File: gcc.info,  Node: Cross Headers,  Next: Cross Runtime,  Prev: Tools and Libraries,  Up: Cross-Compiler

Cross-Compilers and Header Files
--------------------------------

   If you are cross-compiling a standalone program or a program for an
embedded system, then you may not need any header files except the few
that are part of GNU CC (and those of your program).  However, if you
intend to link your program with a standard C library such as `libc.a',
then you probably need to compile with the header files that go with
the library you use.

   The GNU C compiler does not come with these files, because (1) they
are system-specific, and (2) they belong in a C library, not in a
compiler.

   If the GNU C library supports your target machine, then you can get
the header files from there (assuming you actually use the GNU library
when you link your program).

   If your target machine comes with a C compiler, it probably comes
with suitable header files also.  If you make these files accessible
from the host machine, the cross-compiler can use them also.

   Otherwise, you're on your own in finding header files to use when
cross-compiling.

   When you have found suitable header files, put them in
`/usr/local/TARGET/include', before building the cross compiler.  Then
installation will run fixincludes properly and install the corrected
versions of the header files where the compiler will use them.

   Provide the header files before you build the cross-compiler, because
the build stage actually runs the cross-compiler to produce parts of
`libgcc.a'.  (These are the parts that *can* be compiled with GNU CC.)
Some of them need suitable header files.

   Here's an example showing how to copy the header files from a target
machine.  On the target machine, do this:

     (cd /usr/include; tar cf - .) > tarfile

   Then, on the host machine, do this:

     ftp TARGET-MACHINE
     lcd /usr/local/TARGET/include
     get tarfile
     quit
     tar xf tarfile

