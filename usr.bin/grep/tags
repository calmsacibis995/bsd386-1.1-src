AT_STRINGS_BEG	regex.c	/^#define AT_STRINGS_BEG(d) ((d) == (size1 ? string1/
AT_STRINGS_END	regex.c	/^#define AT_STRINGS_END(d) ((d) == end2)	$/
AT_WORD_BOUNDARY	regex.c	/^#define AT_WORD_BOUNDARY(d)						\\$/
BUF_PUSH	regex.c	/^#define BUF_PUSH(c)							\\$/
BUF_PUSH_2	regex.c	/^#define BUF_PUSH_2(c1, c2)						\\$/
BUF_PUSH_3	regex.c	/^#define BUF_PUSH_3(c1, c2, c3)						\\$/
CALLOC	dfa.c	/^#define CALLOC(p, t, n) ((p) = (t *) xcalloc((n), /
CALL_CHUNKFUN	obstack.c	/^#define CALL_CHUNKFUN(h, size) \\$/
CALL_FREEFUN	obstack.c	/^#define CALL_FREEFUN(h, old_chunk) \\$/
DEBUG_POP	regex.c	/^#define DEBUG_POP(item_addr) *(item_addr) = POP_FA/
DEBUG_PRINT1	regex.c	/^#define DEBUG_PRINT1(x) if (debug) printf (x)$/
DEBUG_PRINT2	regex.c	/^#define DEBUG_PRINT2(x1, x2) if (debug) printf (x1/
DEBUG_PRINT3	regex.c	/^#define DEBUG_PRINT3(x1, x2, x3) if (debug) printf/
DEBUG_PRINT4	regex.c	/^#define DEBUG_PRINT4(x1, x2, x3, x4) if (debug) pr/
DEBUG_PRINT_COMPILED_PATTERN	regex.c	/^#define DEBUG_PRINT_COMPILED_PATTERN(p, s, e) 				/
DEBUG_PRINT_DOUBLE_STRING	regex.c	/^#define DEBUG_PRINT_DOUBLE_STRING(w, s1, sz1, s2, /
DEBUG_PUSH	regex.c	/^#define DEBUG_PUSH(item)$/
DEBUG_STATEMENT	regex.c	/^#define DEBUG_STATEMENT(e) e$/
DOUBLE_FAIL_STACK	regex.c	/^#define DOUBLE_FAIL_STACK(fail_stack)					\\$/
EGexecute	search.c	/^EGexecute(buf, size, endp)$/
EVER_MATCHED_SOMETHING	regex.c	/^#define EVER_MATCHED_SOMETHING(R)  ((R).bits.ever_/
EXTEND_BUFFER	regex.c	/^#define EXTEND_BUFFER()							\\$/
EXTRACT_NUMBER	regex.c	/^#define EXTRACT_NUMBER(destination, source)				\\$/
EXTRACT_NUMBER_AND_INCR	regex.c	/^#define EXTRACT_NUMBER_AND_INCR(destination, sourc/
Ecompile	search.c	/^Ecompile(pattern, size)$/
FAIL_STACK_EMPTY	regex.c	/^#define FAIL_STACK_EMPTY()     (fail_stack.avail =/
FAIL_STACK_FULL	regex.c	/^#define FAIL_STACK_FULL()      (fail_stack.avail =/
FAIL_STACK_PTR_EMPTY	regex.c	/^#define FAIL_STACK_PTR_EMPTY() (fail_stack_ptr->av/
FAIL_STACK_TOP	regex.c	/^#define FAIL_STACK_TOP()       (fail_stack.stack[f/
FETCH	dfa.c	/^#define FETCH(c, eoferr)   	      \\$/
FIRST_STRING_P	regex.c	/^#define FIRST_STRING_P(ptr) 					\\$/
FREE_VAR	regex.c	/^#define FREE_VAR(var) if (var) free (var); var = N/
FREE_VARIABLES	regex.c	/^#define FREE_VARIABLES()						\\$/
FUNC	dfa.c	/^#define FUNC(F, P) static int F(c) int c; { return/
Fcompile	search.c	/^Fcompile(pattern, size)$/
Fexecute	search.c	/^Fexecute(buf, size, endp)$/
GET_BUFFER_SPACE	regex.c	/^#define GET_BUFFER_SPACE(n)						\\$/
GET_UNSIGNED_NUMBER	regex.c	/^#define GET_UNSIGNED_NUMBER(num) 					\\$/
Gcompile	search.c	/^Gcompile(pattern, size)$/
INIT_FAIL_STACK	regex.c	/^#define INIT_FAIL_STACK()						\\$/
INSERT_JUMP	regex.c	/^#define INSERT_JUMP(op, loc, to) \\$/
INSERT_JUMP2	regex.c	/^#define INSERT_JUMP2(op, loc, to, arg) \\$/
ISALNUM	dfa.c	/^#define ISALNUM(C) (isascii(C) && isalnum(C))$/
ISALPHA	dfa.c	/^#define ISALPHA(C) (isascii(C) && isalpha(C))$/
ISBLANK	regex.c	/^#define ISBLANK(c) (isascii (c) && isblank (c))$/
ISCNTRL	dfa.c	/^#define ISCNTRL(C) (isascii(C) && iscntrl(C))$/
ISDIGIT	dfa.c	/^#define ISDIGIT(C) (isascii(C) && isdigit(C))$/
ISGRAPH	dfa.c	/^#define ISGRAPH(C) (isascii(C) && isgraph(C))$/
ISLOWER	dfa.c	/^#define ISLOWER(C) (isascii(C) && islower(C))$/
ISPRINT	dfa.c	/^#define ISPRINT(C) (isascii(C) && isprint(C))$/
ISPUNCT	dfa.c	/^#define ISPUNCT(C) (isascii(C) && ispunct(C))$/
ISSPACE	dfa.c	/^#define ISSPACE(C) (isascii(C) && isspace(C))$/
ISUPPER	dfa.c	/^#define ISUPPER(C) (isascii(C) && isupper(C))$/
ISXDIGIT	dfa.c	/^#define ISXDIGIT(C) (isascii(C) && isxdigit(C))$/
IS_ACTIVE	regex.c	/^#define IS_ACTIVE(R)  ((R).bits.is_active)$/
IS_CHAR_CLASS	regex.c	/^#define IS_CHAR_CLASS(string)						\\$/
MALLOC	dfa.c	/^#define MALLOC(p, t, n) ((p) = (t *) xmalloc((n) */
MATCHED_SOMETHING	regex.c	/^#define MATCHED_SOMETHING(R)  ((R).bits.matched_so/
MAX	grep.c	/^#define MAX(A,B) ((A) > (B) ? (A) : (B))$/
MIN	regex.c	/^#define MIN(a, b) ((a) < (b) ? (a) : (b))$/
Mgrep	grep.c	/^main(argc, argv)$/
PATFETCH	regex.c	/^#define PATFETCH(c)							\\$/
PATFETCH_RAW	regex.c	/^#define PATFETCH_RAW(c)							\\$/
POINTER_TO_OFFSET	regex.c	/^#define POINTER_TO_OFFSET(ptr)						\\$/
POP_FAILURE_ITEM	regex.c	/^#define POP_FAILURE_ITEM() fail_stack.stack[--fail/
POP_FAILURE_POINT	regex.c	/^#define POP_FAILURE_POINT(str, pat, low_reg, high_/
PREFETCH	regex.c	/^#define PREFETCH()							\\$/
PUSH_FAILURE_ITEM	regex.c	/^#define PUSH_FAILURE_ITEM(item)						\\$/
PUSH_FAILURE_POINT	regex.c	/^#define PUSH_FAILURE_POINT(pattern_place, string_p/
PUSH_PATTERN_OP	regex.c	/^#define PUSH_PATTERN_OP(pattern_op, fail_stack)			/
REALLOC	dfa.c	/^#define REALLOC(p, t, n) ((p) = (t *) xrealloc((pt/
REALLOC_IF_NECESSARY	dfa.c	/^#define REALLOC_IF_NECESSARY(p, t, nalloc, index) /
REGEX_REALLOCATE	regex.c	/^#define REGEX_REALLOCATE(source, osize, nsize) rea/
REGEX_TALLOC	regex.c	/^#define REGEX_TALLOC(n, t) ((t *) REGEX_ALLOCATE (/
REG_MATCH_NULL_STRING_P	regex.c	/^#define REG_MATCH_NULL_STRING_P(R)  ((R).bits.matc/
REG_UNSET	regex.c	/^#define REG_UNSET(e) ((e) == REG_UNSET_VALUE)$/
RETALLOC	regex.c	/^#define RETALLOC(addr, n, t) ((addr) = (t *) reall/
SET_LIST_BIT	regex.c	/^#define SET_LIST_BIT(c)                           /
SET_REGS_MATCHED	regex.c	/^#define SET_REGS_MATCHED()						\\$/
SIGN_EXTEND_CHAR	regex.c	/^#define SIGN_EXTEND_CHAR(c) ((signed char) (c))$/
STORE_JUMP	regex.c	/^#define STORE_JUMP(op, loc, to) \\$/
STORE_JUMP2	regex.c	/^#define STORE_JUMP2(op, loc, to, arg) \\$/
STORE_NUMBER	regex.c	/^#define STORE_NUMBER(destination, number)				\\$/
STORE_NUMBER_AND_INCR	regex.c	/^#define STORE_NUMBER_AND_INCR(destination, number)/
STREQ	regex.c	/^#define STREQ(s1, s2) ((strcmp (s1, s2) == 0))$/
SYNTAX	regex.c	/^#define SYNTAX(c) re_syntax_table[c]$/
TALLOC	regex.c	/^#define TALLOC(n, t) ((t *) malloc ((n) * sizeof (/
TOLOWER	search.c	/^#define TOLOWER(C) (ISUPPER(C) ? tolower(C) : (C))/
TRANSLATE	regex.c	/^#define TRANSLATE(d) (translate ? translate[(unsig/
U	kwset.c	/^#define U(C) ((unsigned char) (C))$/
WCHAR	search.c	/^#define WCHAR(C) (ISALNUM(C) || (C) == '_')$/
WORDCHAR_P	regex.c	/^#define WORDCHAR_P(d)							\\$/
_obstack_allocated_p	obstack.c	/^_obstack_allocated_p (h, obj)$/
_obstack_begin	obstack.c	/^_obstack_begin (h, size, alignment, chunkfun, free/
_obstack_begin_1	obstack.c	/^_obstack_begin_1 (h, size, alignment, chunkfun, fr/
_obstack_free	obstack.c	/^_obstack_free (h, obj)$/
_obstack_newchunk	obstack.c	/^_obstack_newchunk (h, length)$/
addlists	dfa.c	/^addlists(old, new)$/
addtok	dfa.c	/^addtok(t)$/
alt_match_null_string_p	regex.c	/^alt_match_null_string_p (p, end, reg_info)$/
assert	regex.c	/^#define assert(e)$/
at_begline_loc_p	regex.c	/^at_begline_loc_p (pattern, p, syntax)$/
at_endline_loc_p	regex.c	/^at_endline_loc_p (p, pend, syntax)$/
atom	dfa.c	/^atom()$/
bcmp	regex.c	/^#define bcmp(s1, s2, n)	memcmp ((s1), (s2), (n))$/
bcmp_translate	regex.c	/^bcmp_translate (s1, s2, len, translate)$/
bcopy	regex.c	/^#define bcopy(s, d, n)	memcpy ((d), (s), (n))$/
bmexec	kwset.c	/^bmexec(kws, text, size)$/
branch	dfa.c	/^branch()$/
build_state	dfa.c	/^build_state(s, d)$/
build_state_zero	dfa.c	/^build_state_zero(d)$/
bzero	regex.c	/^#define bzero(s, n)	memset ((s), 0, (n))$/
charclass_index	dfa.c	/^charclass_index(s)$/
closure	dfa.c	/^closure()$/
clrbit	dfa.c	/^clrbit(b, c)$/
common_op_match_null_string_p	regex.c	/^common_op_match_null_string_p (p, end, reg_info)$/
compile_range	regex.c	/^compile_range (p_ptr, pend, translate, syntax, b)$/
comsubs	dfa.c	/^comsubs(left, right)$/
copy	dfa.c	/^copy(src, dst)$/
copyset	dfa.c	/^copyset(src, dst)$/
copytoks	dfa.c	/^copytoks(tindex, ntokens)$/
cwexec	kwset.c	/^cwexec(kws, text, len, kwsmatch)$/
delete	dfa.c	/^delete(p, s)$/
dfaanalyze	dfa.c	/^dfaanalyze(d, searchflag)$/
dfacomp	dfa.c	/^dfacomp(s, len, d, searchflag)$/
dfaerror	search.c	/^dfaerror(mesg)$/
dfaexec	dfa.c	/^dfaexec(d, begin, end, newline, count, backref)$/
dfafree	dfa.c	/^dfafree(d)$/
dfainit	dfa.c	/^dfainit(d)$/
dfamust	dfa.c	/^dfamust(dfa)$/
dfaparse	dfa.c	/^dfaparse(s, len, d)$/
dfastate	dfa.c	/^dfastate(s, d, trans)$/
dfasyntax	dfa.c	/^dfasyntax(bits, fold)$/
enlist	dfa.c	/^enlist(cpp, new, len)$/
enqueue	kwset.c	/^enqueue(tree, last)$/
epsclosure	dfa.c	/^epsclosure(s, d)$/
equal	dfa.c	/^equal(s1, s2)$/
extract_number	regex.c	/^extract_number (dest, source)$/
extract_number_and_incr	regex.c	/^extract_number_and_incr (destination, source)$/
fillbuf	grep.c	/^fillbuf(save)$/
freelist	dfa.c	/^freelist(cpp)$/
grep	grep.c	/^grep(fd)$/
grepbuf	grep.c	/^grepbuf(beg, lim)$/
group_in_compile_stack	regex.c	/^group_in_compile_stack (compile_stack, regnum)$/
group_match_null_string_p	regex.c	/^group_match_null_string_p (p, end, reg_info)$/
hasevery	kwset.c	/^hasevery(a, b)$/
icatalloc	dfa.c	/^icatalloc(old, new)$/
icpyalloc	dfa.c	/^icpyalloc(string)$/
ifree	dfa.c	/^ifree(cp)$/
inboth	dfa.c	/^inboth(left, right)$/
init_syntax_once	regex.c	/^init_syntax_once ()$/
insert	dfa.c	/^insert(p, s)$/
insert_op1	regex.c	/^insert_op1 (op, loc, arg, end)$/
insert_op2	regex.c	/^insert_op2 (op, loc, arg1, arg2, end)$/
isascii	regex.c	/^#define isascii(c) 1$/
isgraph	dfa.c	/^#define isgraph(C) (isprint(C) && !isspace(C))$/
istrstr	dfa.c	/^istrstr(lookin, lookfor)$/
kwsalloc	kwset.c	/^kwsalloc(trans)$/
kwsexec	kwset.c	/^kwsexec(kws, text, size, kwsmatch)$/
kwsfree	kwset.c	/^kwsfree(kws)$/
kwsincr	kwset.c	/^kwsincr(kws, text, len)$/
kwsinit	search.c	/^kwsinit()$/
kwsmusts	search.c	/^kwsmusts()$/
kwsprep	kwset.c	/^kwsprep(kws)$/
lex	dfa.c	/^lex()$/
looking_at	dfa.c	/^looking_at(s)$/
memchr	grep.c	/^memchr(vp, c, n)$/
merge	dfa.c	/^merge(s1, s2, m)$/
nlscan	grep.c	/^nlscan(lim)$/
notset	dfa.c	/^notset(s)$/
nsubtoks	dfa.c	/^nsubtoks(tindex)$/
obstack_free	obstack.c	/^obstack_free (h, obj)$/
print_compiled_pattern	regex.c	/^print_compiled_pattern (bufp)$/
print_double_string	regex.c	/^print_double_string (where, string1, size1, string/
print_fastmap	regex.c	/^print_fastmap (fastmap)$/
print_partial_compiled_pattern	regex.c	/^print_partial_compiled_pattern (start, end)$/
prline	grep.c	/^prline(beg, lim, sep)$/
prpending	grep.c	/^prpending(lim)$/
prtext	grep.c	/^prtext(beg, lim, nlinesp)$/
prtok	dfa.c	/^prtok(t)$/
re_comp	regex.c	/^re_comp (s)$/
re_compile_fastmap	regex.c	/^re_compile_fastmap (bufp)$/
re_compile_pattern	regex.c	/^re_compile_pattern (pattern, length, bufp)$/
re_exec	regex.c	/^re_exec (s)$/
re_match	regex.c	/^re_match (bufp, string, size, pos, regs)$/
re_match_2	regex.c	/^re_match_2 (bufp, string1, size1, string2, size2, /
re_search	regex.c	/^re_search (bufp, string, size, startpos, range, re/
re_search_2	regex.c	/^re_search_2 (bufp, string1, size1, string2, size2,/
re_set_registers	regex.c	/^re_set_registers (bufp, regs, num_regs, starts, en/
re_set_syntax	regex.c	/^re_set_syntax (syntax)$/
regcomp	regex.c	/^regcomp (preg, pattern, cflags)$/
regerror	regex.c	/^regerror (errcode, preg, errbuf, errbuf_size)$/
regex_compile	regex.c	/^regex_compile (pattern, size, syntax, bufp)$/
regexec	regex.c	/^regexec (preg, string, nmatch, pmatch, eflags)$/
regexp	dfa.c	/^regexp(toplevel)$/
regfree	regex.c	/^regfree (preg)$/
reset	grep.c	/^reset(fd)$/
resetmust	dfa.c	/^resetmust(mp)$/
setbit	dfa.c	/^setbit(b, c)$/
setmatcher	grep.c	/^setmatcher(name)$/
state_index	dfa.c	/^state_index(d, s, newline, letter)$/
store_op1	regex.c	/^store_op1 (op, loc, arg)$/
store_op2	regex.c	/^store_op2 (op, loc, arg1, arg2)$/
strerror	grep.c	/^#define strerror(E) ((E) < sys_nerr ? sys_errlist[/
treedelta	kwset.c	/^treedelta(tree, depth, delta)$/
treefails	kwset.c	/^treefails(tree, fail, recourse)$/
treenext	kwset.c	/^treenext(tree, next)$/
tstbit	dfa.c	/^tstbit(b, c)$/
usage	grep.c	/^usage()$/
xcalloc	dfa.c	/^xcalloc(n, s)$/
xmalloc	dfa.c	/^xmalloc(n)$/
xrealloc	dfa.c	/^xrealloc(p, n)$/
zeroset	dfa.c	/^zeroset(s)$/
